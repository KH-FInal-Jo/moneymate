<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="CboardMapper">


   <resultMap type="CBoard" id="board_rm">

      <id property="boardNo" column="BOARD_NO" />

      <result property="boardTitle" column="BOARD_TITLE" />
      <result property="boardCode" column="BOARD_CODE" />
      <result property="boardContent" column="BOARD_CONTENT" />
      <result property="boardCreateDate" column="BOARD_DT" />
      <result property="boardUpdateDate" column="BOARD_UPDATE_DT" />
      <result property="readCount" column="READ_COUNT" />
      <result property="commentCount" column="COMMENT_COUNT" />
      <result property="likeCount" column="LIKE_COUNT" />
      <result property="memberNickname" column="MEMBER_NICKNAME" />
      <result property="memberId" column="MEMBER_EMAIL" />

      <result property="memberNo" column="MEMBER_NO" />
      <result property="profileImage" column="PROFILE_IMG" />

      <result property="thumbnail" column="THUMBNAIL" />


      <collection property="imageList" select="selectImageList"
         column="BOARD_NO" javaType="java.util.ArrayList" ofType="CBoardImage">
      </collection>

      <collection property="commentList"
         select="selectCommentList" column="BOARD_NO"
         javaType="java.util.ArrayList" ofType="CComment">
      </collection>

   </resultMap>


   <resultMap type="CBoardImage" id="boardImage_rm">
      <id property="boardNo" column="BR_NO" />

      <result property="imagePath" column="IMG_PATH" />
      <result property="imageReName" column="IMG_RENAME" />
      <result property="imageOriginal" column="IMG_ORIGINAL" />
      <result property="imageOrder" column="IMG_LEVEL" />
      <result property="imageCode" column="IMG_CD" />
   </resultMap>
   

   <resultMap type="CComment" id="comment_rm">
      <id property="commentNo" column="COMMENT_NO" />
      <result property="commentContent" column="COMMENT_CONTENT" />
      <result property="commentCreateDate" column="COMMENT_DT" />
      <result property="boardNo" column="BOARD_NO" />
      <result property="memberNo" column="MEMBER_NO" />
      <result property="commentDeleteFlag" column="COMMENT_ST" />
      <result property="parentNo" column="PARENT_NO" />
      <result property="memberNickname" column="MEMBER_NICKNAME" />
      <result property="profileImage" column="PROFILE_IMG" />
   </resultMap>
   
   
   
   <resultMap type="CReport" id="report_rm">
      <id property="reportNo" column="REPORT_NO" />

      <result property="reportedNo" column="REPORTED_NO" />
      <result property="reportContent" column="REPORT_CONTENT" />
      <result property="boardNo" column="BC_NO" />
      <result property="reportCode" column="REPORT_CODE" />
      <result property="reportCategory" column="CATEGORY" />
      <result property="reportDate" column="REPORT_DATE" />
      <result property="reportState" column="REPORT_ST" />
   </resultMap>





   <select id="getListCount" resultType="_int">
      SELECT COUNT(*) FROM BOARD
      WHERE BOARD_CODE = #{boardCode}
      AND BOARD_ST = 'N'   
   </select>
   
   
   <!-- 게시글목록조회 -->
   <select id="selectBoardList" resultMap="board_rm">
      SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT, 
         
         <![CDATA[
            CASE  
               WHEN SYSDATE - BOARD_DT < 1/24/60
               THEN FLOOR( (SYSDATE - BOARD_DT) * 24 * 60 * 60 ) || '초 전'
               WHEN SYSDATE - BOARD_DT < 1/24
               THEN FLOOR( (SYSDATE - BOARD_DT) * 24 * 60) || '분 전'
               WHEN SYSDATE - BOARD_DT < 1
               THEN FLOOR( (SYSDATE - BOARD_DT) * 24) || '시간 전'
               ELSE TO_CHAR(BOARD_DT, 'YYYY-MM-DD')
            END BOARD_DT,
            
         ]]>
      (SELECT COUNT(*) FROM "COMMENT" C
      WHERE C.BOARD_NO = B.BOARD_NO
      AND COMMENT_ST = 'N')
      COMMENT_COUNT,

      (SELECT COUNT(*) FROM "LIKE" L
      WHERE L.BR_NO =   B.BOARD_NO
      AND LIKE_CODE = 1) LIKE_COUNT,

      (SELECT IMG_PATH || IMG_RENAME FROM IMAGE I
      WHERE I.BR_NO = B.BOARD_NO
      AND I.IMG_CD = 1
      AND IMG_LEVEL = 0) THUMBNAIL
      FROM "BOARD" B
      JOIN "MEMBER" USING(MEMBER_NO)
      WHERE BOARD_ST = 'N'
      AND BOARD_CODE
      = #{boardCode}
      ORDER BY BOARD_NO DESC
   </select>
   
   
   <!-- 특정 게시글 이미지 조회 -->
   <select id="selectImageList" resultMap="boardImage_rm">
      SELECT * FROM IMAGE
      WHERE BR_NO = #{boardNo}
      AND IMG_CD = 1
      ORDER BY IMG_LEVEL
   </select>

   <!-- 특정 게시글 댓글 조회 -->
   <select id="selectCommentList" resultMap="comment_rm">
      SELECT LEVEL, C.* FROM
      (SELECT COMMENT_NO, COMMENT_CONTENT,
      TO_CHAR(COMMENT_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') COMMENT_DT
      , BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE, PARENT_NO ,COMMENT_ST
      FROM "COMMENT"
      JOIN MEMBER USING (MEMBER_NO)
      WHERE BOARD_NO = #{boardNo}) C
      WHERE COMMENT_ST = 'N'
      START WITH
      PARENT_NO IS NULL
      CONNECT BY PRIOR COMMENT_NO = PARENT_NO
      ORDER SIBLINGS
      BY COMMENT_NO
   </select>
   
   
   <!-- 게시글 상세 조회 -->
   <select id="selectBoard" resultMap="board_rm">
      SELECT BOARD_NO, BOARD_TITLE,
      BOARD_CONTENT, BOARD_CODE,
      READ_COUNT, MEMBER_NICKNAME, MEMBER_NO, MEMBER_EMAIL,
      PROFILE,
      TO_CHAR(BOARD_DT,'YYYY"년" MM"월" DD"일" HH24:MI:SS')
      BOARD_DT,
      TO_CHAR(BOARD_UPDATE_DT,'YYYY"년" MM"월" DD"일" HH24:MI:SS')
      BOARD_UPDATE_DT,
      (SELECT COUNT(*)FROM "LIKE" L
      WHERE L.BR_NO = B.BOARD_NO) LIKE_COUNT
      FROM BOARD B
      JOIN MEMBER USING (MEMBER_NO)
      WHERE
      BOARD_ST = 'N'
      AND BOARD_CODE = #{boardCode}
      AND BOARD_NO = #{boardNo}
   </select>
   
   
   <!-- 댓글 조회 -->
   
   
   <!-- 게시글 삽입 -->
   <insert id="boardInsert" parameterType="CBoard"
      useGeneratedKeys="true">

      <selectKey order="BEFORE" resultType="_int"
         keyProperty="boardNo">
         SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
      </selectKey>

      INSERT INTO BOARD
      VALUES( #{boardNo},
      #{boardTitle},
      #{boardContent},
      DEFAULT, DEFAULT, DEFAULT, DEFAULT,
      #{boardCode},
      #{memberNo})
   </insert>
   
   
   <!-- 이미지 리스트(여러 개) 삽입 -->
   <insert id="insertImageList" parameterType="list">
      INSERT INTO IMAGE
      SELECT  A.*
      FROM (

      <foreach collection="list" item="img" separator=" UNION ALL ">
         SELECT
         #{img.boardNo} BR_NO,
         1 IMG_CD,
         #{img.imagePath} IMG_PATH,
         #{img.imageReName} IMG_RENAME,
         #{img.imageOriginal} IMG_ORIGINAL,
         #{img.imageOrder} IMG_LEVEL
         FROM DUAL
      </foreach>

      )A

   </insert>
   
   
   
   <!-- 좋아요 여부 확인 -->
   <select id="boardLikeCheck" resultType="_int">
      SELECT COUNT(*) FROM
      "LIKE"
      WHERE BR_NO = #{boardNo}
      AND LIKE_CODE = 1
      AND MEMBER_NO = #{memberNo}
   </select>

   <!-- 좋아요 삽입 -->
   <insert id="insertBoardLike">
      INSERT INTO "LIKE" VALUES(
      ${memberNo}, ${boardNo}, 1)
   </insert>

   <!-- 좋아요 삭제 -->
   <delete id="deleteBoardLike">
      DELETE FROM "LIKE" WHERE BR_NO = ${boardNo}
      AND MEMBER_NO = ${memberNo}
      AND LIKE_CODE = 1
   </delete>

   <!-- 좋아요 개수 조회 -->
   <select id="CountBoardLike" resultType="_int">
      SELECT COUNT(*) FROM
      "LIKE"
      WHERE BR_NO = ${boardNo}
      AND LIKE_CODE = 1
   </select>
   
   <!-- 조회수 증가 -->
   <update id="updateReadCount">
      UPDATE BOARD SET READ_COUNT = READ_COUNT + 1
      WHERE
      BOARD_NO = ${boardNo}
   </update>
   
   
   <!-- 게시글 수정 -->
   <update id="boardUpdate">
      UPDATE BOARD
      SET BOARD_TITLE = #{boardTitle}, BOARD_CONTENT = #{boardContent}
      ,BOARD_UPDATE_DT = SYSDATE
      WHERE BOARD_NO = #{boardNo}
      AND BOARD_CODE = #{boardCode}
   </update>

   <!-- 이미지 삭제 -->
   <delete id="imageDelete">
      DELETE FROM IMAGE
      WHERE BR_NO = #{boardNo}
      AND IMG_CD = 1
      AND IMG_LEVEL IN
      (${deleteList})
   </delete>

   <!-- 이미지 수정 -->
   <update id="imageUpdate">
      UPDATE IMAGE SET
      IMG_PATH = #{imagePath},
      IMG_RENAME = #{imageReName},
      IMG_ORIGINAL = #{imageOriginal}
      WHERE BR_NO = #{boardNo}
      AND IMG_LEVEL = #{imageOrder}
   </update>

   <!-- 이미지 삽입(1개) -->
   <insert id="imageInsert">
      INSERT INTO IMAGE
      VALUES( #{boardNo}, 1,
      #{imagePath}, #{imageReName},
      #{imageOriginal}, #{imageOrder})
   </insert>
   
   <!-- 게시글 삭제 -->
   <update id="boardDelete">
      UPDATE "BOARD" SET
      BOARD_ST = 'Y'
      WHERE BOARD_NO = ${boardNo}
   </update>
   
   
   
   <!-- 특정 게시판의 삭제되지 않고 검색 조건이 일치하는 게시글 수 조회 -->
   <select id="getListCount_search" resultType="_int">
      SELECT COUNT(*) FROM BOARD
      
      <!-- 작성자 검색 -->
      <if test='sel == "w"'>
         JOIN MEMBER USING(MEMBER_NO)
      </if>
      
      WHERE BOARD_ST = 'N'
      AND BOARD_CODE = #{boardCode}
      
      
      <choose>
         <when test='sel == "t"'>
            AND BOARD_TITLE LIKE '%${query}%'
         </when>
         
         <when test='sel == "c"'>
            AND BOARD_CONTENT LIKE '%${query}%'
         </when>
         
         <when test='sel == "tc"'>
            AND (BOARD_TITLE LIKE '%${query}%'
            OR BOARD_CONTENT LIKE '%${query}%')
         </when>
         
         <when test='sel == "w"'>
            AND MEMBER_NICKNAME LIKE '%${query}%'
         </when>
      
      </choose>
      
      
   </select>
   
   
   <!-- 게시글목록조회 -->
   <select id="selectBoardList_search" resultMap="board_rm">
      SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT, 
         
         <![CDATA[
            CASE  
               WHEN SYSDATE - BOARD_DT < 1/24/60
               THEN FLOOR( (SYSDATE - BOARD_DT) * 24 * 60 * 60 ) || '초 전'
               WHEN SYSDATE - BOARD_DT < 1/24
               THEN FLOOR( (SYSDATE - BOARD_DT) * 24 * 60) || '분 전'
               WHEN SYSDATE - BOARD_DT < 1
               THEN FLOOR( (SYSDATE - BOARD_DT) * 24) || '시간 전'
               ELSE TO_CHAR(BOARD_DT, 'YYYY-MM-DD')
            END BOARD_DT,
            
         ]]>
      (SELECT COUNT(*) FROM "COMMENT" C
      WHERE C.BOARD_NO = B.BOARD_NO
      AND COMMENT_ST = 'N')
      COMMENT_COUNT,

      (SELECT COUNT(*) FROM "LIKE" L
      WHERE L.BR_NO =   B.BOARD_NO
      AND LIKE_CODE = 1) LIKE_COUNT,

      (SELECT IMG_PATH || IMG_RENAME FROM IMAGE I
      WHERE I.BR_NO = B.BOARD_NO
      AND IMG_CD = 1
      AND IMG_LEVEL = 0) THUMBNAIL
      FROM "BOARD" B
      JOIN "MEMBER" USING(MEMBER_NO)
      WHERE BOARD_ST = 'N'
      AND BOARD_CODE
      = #{boardCode}
      
      <choose>
         <when test='sel == "t"'>
            AND BOARD_TITLE LIKE '%${query}%'
         </when>
         
         <when test='sel == "c"'>
            AND BOARD_CONTENT LIKE '%${query}%'
         </when>
         
         <when test='sel == "tc"'>
            AND (BOARD_TITLE LIKE '%${query}%'
            OR BOARD_CONTENT LIKE '%${query}%')
         </when>
         
         <when test='sel == "w"'>
            AND MEMBER_NICKNAME LIKE '%${query}%'
         </when>
      
      </choose>
      
      ORDER BY BOARD_NO DESC
   </select>
   
   
   <!-- 댓글 삽입 -->
   <insert id="insertComment">
      INSERT INTO "COMMENT"
      VALUES(SEQ_COMMENT_NO.NEXTVAL, #{commentContent}, DEFAULT, DEFAULT, #{memberNo}, #{boardNo}, 
      
      <!-- 동적 sql : if 문 -->
      
      <!-- 부모 댓글 -->
      <if test="parentNo == 0">NULL</if>
      
      <!-- 자식 댓글 -->
      <if test="parentNo != 0">#{parentNo}</if>
      
      )
   </insert>
   
   
   <!-- 댓글 삭제 -->
   <update id="deleteComment">
      UPDATE "COMMENT" SET
      COMMENT_ST = 'Y'
      WHERE COMMENT_NO = #{commentNo}
        OR COMMENT_NO IN (SELECT COMMENT_NO FROM "COMMENT" WHERE PARENT_NO = #{commentNo})
   </update>
   
   
   <!-- 댓글 수정 -->
   <update id="updateComment">
      UPDATE "COMMENT"
      SET COMMENT_CONTENT = #{commentContent}
      WHERE COMMENT_NO = #{commentNo}
   </update>
   
   <!-- 신고하기 -->
   <insert id="insertReport" parameterType="CReport">
      INSERT INTO "REPORT"
      VALUES( #{reportNo},
      #{reportedNo},
      #{reportContent},
      #{boardNo}, 1, #{reportCategory}, DEFAULT, DEFAULT
      )
   </insert>
   
   <!-- 알람 테이블 댓글 삽입 -->
   <insert id="insertAlarmComment">
      INSERT INTO ALERT VALUES(SEQ_ALERT_NO.NEXTVAL,#{boardNo}, SEQ_COMMENT_NO.NEXTVAL , DEFAULT, DEFAULT, (SELECT MEMBER_NO FROM BOARD
      WHERE BOARD_NO = #{boardNo}) )
   </insert>
   
   
   
   
   
</mapper>